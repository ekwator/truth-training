use std::sync::Arc;
use tokio::sync::Mutex;
use rusqlite::Connection;
use reqwest::Client;
use crate::p2p::encryption::CryptoIdentity;
use ed25519_dalek::Signature;

pub async fn sync_with_peer(
    peer_url: &str,
    conn: Arc<Mutex<Connection>>,
    identity: &CryptoIdentity,
) -> Result<(), Box<dyn std::error::Error>> {
    let client = Client::new();

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    let message = format!("sync_request:{}", chrono::Utc::now().timestamp());
    let signature: Signature = identity.sign(message.as_bytes());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–ø–∏—Å—å—é
    let resp = client
        .get(format!("{}/events", peer_url))
        .header("X-Public-Key", identity.public_key_hex())
        .header("X-Signature", hex::encode(signature.to_bytes()))
        .send()
        .await?;

    if resp.status().is_success() {
        let remote_events: serde_json::Value = resp.json().await?;
        println!("üì° Got {} events from {}", remote_events, peer_url);

        // TODO: —Å–≤–µ—Ä–∏—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    } else {
        println!("‚ùå Peer {} returned {}", peer_url, resp.status());
    }

    Ok(())
}
